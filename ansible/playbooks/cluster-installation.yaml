---
- hosts:
    - master
    - worker
  become: true
  gather_facts: true
  any_errors_fatal: true
  pre_tasks:
    - name: Pausing for 5 seconds...
      ansible.builtin.pause:
        seconds: 5
  tasks:
    - name: Fix DNS for ubuntu
      block:
        - name: Stop and disable service which messes with DNS
          service:
            name: "systemd-resolved"
            state: stopped
            enabled: false
        - name: Delete link to the systemd-resolved resolv.conf
          ansible.builtin.file:
            path: /etc/resolv.conf
            state: absent
        - name: Create empty resolv.conf
          ansible.builtin.file:
            path: /etc/resolv.conf
            state: touch
        - name: Setup nameserver
          blockinfile: |
            dest=/etc/resolv.conf
            content="nameserver {{ dns }}"
      when: ansible_facts['distribution'] == 'Ubuntu'

    - name: Get absolute path to this Git repository
      delegate_to: localhost
      become: false
      run_once: true
      check_mode: false
      ansible.builtin.command: |-
        git rev-parse --show-toplevel
      register: repo_abs_path

    - name: Configure kubelet
      block:
        - name: Create a directory if it does not exist
          ansible.builtin.file:
            path: /etc/rancher/k3s/
            state: directory
            mode: '0755'
        - name: Install kubelet.config
          ansible.builtin.copy:
            src: "{{ repo_abs_path.stdout }}/ansible/playbooks/configs/kubelet.config"
            dest: /etc/rancher/k3s/kubelet.config
            mode: '0755'
      when:
        - inventory_hostname in groups['master']

    - name: Make GPU world writeable
      file:
        path: /dev/dri
        mode: u=rwX,g=rwX,o=rwX
        recurse: yes

    - name: Disable SWAP since kubernetes can't work with swap enabled (1/2)
      shell: |
        swapoff -a

    - name: Disable SWAP in fstab since kubernetes can't work with swap enabled (2/2)
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: Check if cluster is installed
      check_mode: false
      ansible.builtin.stat:
        path: "/etc/rancher/k3s/config.yaml"
      register: k3s_check_installed

    - name: Set manifest facts
      ansible.builtin.set_fact:
        k3s_server_manifests_templates: []
        k3s_server_manifests_urls: []
      when: k3s_check_installed.stat.exists

    - name: Install Kubernetes
      ansible.builtin.include_role:
        name: xanmanning.k3s
        public: true
      vars:
        k3s_state: installed

    - name: Copy kubeconfig project directory
      run_once: true
      ansible.builtin.fetch:
        src: "/etc/rancher/k3s/k3s.yaml"
        dest: "{{ repo_abs_path.stdout }}/kubeconfig"
        flat: true
      when:
        - k3s_control_node is defined
        - k3s_control_node

    - name: Update kubeconfig with the correct IPv4 address
      delegate_to: localhost
      become: false
      run_once: true
      ansible.builtin.replace:
        path: "{{ repo_abs_path.stdout }}/kubeconfig"
        regexp: "https://127.0.0.1:6443"
        replace: "https://{{ k3s_registration_address }}:6443"

    - name: Create argocd namespace
      kubernetes.core.k8s:
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        name: argocd
        api_version: v1
        kind: Namespace
        state: present
      when:
        - k3s_control_node

    - name: Create networking namespace
      kubernetes.core.k8s:
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        name: networking
        api_version: v1
        kind: Namespace
        state: present
      when:
        - k3s_control_node

    - name: Check if ArgoCD is installed
      kubernetes.core.k8s_info:
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        kind: "Deployment"
        name: "argocd-server"
        namespace: "argocd"
      register: argocd_server
      when:
        - k3s_control_node
      run_once: true

    - name: Download and install ArgoCD
      block:
        - name: Install helm if it doesn't exist
          ansible.builtin.shell: |
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          args:
            creates: /usr/local/bin/helm
        - name: Add ArgoCD chart repo
          kubernetes.core.helm_repository:
            name: argocd
            repo_url: "https://argoproj.github.io/argo-helm"
        - name: Deploy latest version of ArgoCD chart
          kubernetes.core.helm:
            name: argocd
            kubeconfig: /etc/rancher/k3s/k3s.yaml
            chart_ref: argocd/argo-cd
            release_namespace: argocd
            create_namespace: true
      run_once: true
      when:
        - argocd_server.api_found
        - k3s_control_node



    - name: Resource Readiness Check
      run_once: true
      kubernetes.core.k8s_info:
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        kind: "{{ item.kind }}"
        name: "{{ item.name }}"
        namespace: "{{ item.namespace | default('') }}"
        wait: true
        wait_sleep: 10
        wait_timeout: 360
      loop:
        - kind: Secret
          name: cloudflare-api-token-secret
        - kind: ApplicationSet
          name: manifest-apps
        - kind: NetworkPolicy
          name: argocd-server-network-policy
        - kind: Deployment
          name: tigera-operator
          namespace: tigera-operator
        - kind: DaemonSet
          name: kube-vip
          namespace: kube-system
        - kind: Installation
          name: default
        - kind: CustomResourceDefinition
          name: alertmanagerconfigs.monitoring.coreos.com
        - kind: CustomResourceDefinition
          name: alertmanagers.monitoring.coreos.com
        - kind: CustomResourceDefinition
          name: podmonitors.monitoring.coreos.com
        - kind: CustomResourceDefinition
          name: probes.monitoring.coreos.com
        - kind: CustomResourceDefinition
          name: prometheuses.monitoring.coreos.com
        - kind: CustomResourceDefinition
          name: prometheusrules.monitoring.coreos.com
        - kind: CustomResourceDefinition
          name: servicemonitors.monitoring.coreos.com
        - kind: CustomResourceDefinition
          name: thanosrulers.monitoring.coreos.com
        - kind: CustomResourceDefinition
          name: thanosrulers.monitoring.coreos.com
      when:
        - k3s_server_manifests_templates | length > 0
          or k3s_server_manifests_urls | length > 0
        - k3s_control_node is defined
        - k3s_control_node

    # Cleaning up the manifests from the /var/lib/rancher/k3s/server/manifests
    # directory is needed because k3s has an awesome "feature" to always deploy
    # these on restarting the k3s systemd service. Removing them does NOT
    # uninstall the manifests.

    # Removing them means we can manage the lifecycle of these components
    # outside of the /var/lib/rancher/k3s/server/manifests directory

    - name: Remove deployed manifest templates
      ansible.builtin.file:
        path: "{{ k3s_server_manifests_dir }}/{{ item | basename | regex_replace('\\.j2$', '') }}"
        state: absent
      loop: "{{ k3s_server_manifests_templates | default([]) }}"

    - name: Remove deployed manifest urls
      ansible.builtin.file:
        path: "{{ k3s_server_manifests_dir }}/{{ item.filename }}"
        state: absent
      loop: "{{ k3s_server_manifests_urls | default([]) }}"


    - name: Resource Readiness Check
      run_once: true
      kubernetes.core.k8s_info:
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        kind: "{{ item.kind }}"
        name: "{{ item.name }}"
        namespace: "{{ item.namespace | default('') }}"
        wait: true
        wait_sleep: 10
        wait_timeout: 360
      loop:
        - kind: Secret
          name: cloudflare-api-token-secret
        - kind: ApplicationSet
          name: manifest-apps
        - kind: NetworkPolicy
          name: argocd-server-network-policy
        - kind: Deployment
          name: tigera-operator
          namespace: networking
        - kind: DaemonSet
          name: kube-vip
          namespace: kube-system
        - kind: Installation
          name: default
        - kind: CustomResourceDefinition
          name: alertmanagerconfigs.monitoring.coreos.com
        - kind: CustomResourceDefinition
          name: alertmanagers.monitoring.coreos.com
        - kind: CustomResourceDefinition
          name: podmonitors.monitoring.coreos.com
        - kind: CustomResourceDefinition
          name: probes.monitoring.coreos.com
        - kind: CustomResourceDefinition
          name: prometheuses.monitoring.coreos.com
        - kind: CustomResourceDefinition
          name: prometheusrules.monitoring.coreos.com
        - kind: CustomResourceDefinition
          name: servicemonitors.monitoring.coreos.com
        - kind: CustomResourceDefinition
          name: thanosrulers.monitoring.coreos.com
        - kind: CustomResourceDefinition
          name: thanosrulers.monitoring.coreos.com
      when:
        - k3s_server_manifests_templates | length > 0
            or k3s_server_manifests_urls | length > 0
        - k3s_control_node is defined
        - k3s_control_node

    # Cleaning up the manifests from the /var/lib/rancher/k3s/server/manifests
    # directory is needed because k3s has an awesome "feature" to always deploy
    # these on restarting the k3s systemd service. Removing them does NOT
    # uninstall the manifests.

    # Removing them means we can manage the lifecycle of these components
    # outside of the /var/lib/rancher/k3s/server/manifests directory

    - name: Remove deployed manifest templates
      ansible.builtin.file:
        path: "{{ k3s_server_manifests_dir }}/{{ item | basename | regex_replace('\\.j2$', '') }}"
        state: absent
      loop: "{{ k3s_server_manifests_templates | default([]) }}"

    - name: Remove deployed manifest urls
      ansible.builtin.file:
        path: "{{ k3s_server_manifests_dir }}/{{ item.filename }}"
        state: absent
      loop: "{{ k3s_server_manifests_urls | default([]) }}"
