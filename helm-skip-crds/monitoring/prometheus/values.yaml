kube-prometheus-stack:
  nameOverride: "prometheus"
  fullNameOverride: "prometheus"
  alertmanager:
    fullNameOverride: alertmanager
    alertmanagerSpec:
      useExistingSecret: true
      configSecret: alertmanager-config
      podAntiAffinity: soft
      resources:
        limits:
          cpu: 200m
          memory: 400Mi
        requests:
          cpu: 100m
          memory: 300Mi
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: ceph-block
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 50Gi
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "prod-issuer"
        hajimari.io/enable: "true"
        hajimari.io/group: "Monitoring"
        kubernetes.io/ingress-allow-http: "false" 
        kubernetes.io/ingress.class: "nginx"
        nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8"
      hosts:
        - alert-manager.k8s.tylercash.dev
      tls:
        - secretName: alert-manager-letsencrypt-certificate
          hosts:
            - alert-manager.k8s.tylercash.dev
  grafana:
    fullNameOverride: grafana
    defaultDashboardsTimezone: Australia/Sydney
    dashboards:
      ceph-cluster:
        url: https://grafana.com/api/dashboards/2842/revisions/1/download
        datasource: Prometheus
        token: ''
      ceph-pools:
        url: https://grafana.com/api/dashboards/5342/revisions/1/download
        datasource: Prometheus
        token: ''
      ceph-osds:
        url: https://grafana.com/api/dashboards/5336/revisions/1/download
        datasource: Prometheus
        token: ''
      authentik:
        url: https://grafana.com/api/dashboards/14837/revisions/1/download
        datasource: Prometheus
        token: ''
      mysql:
        url: https://grafana.com/api/dashboards/6239/revisions/1/download
        datasource: Prometheus
        token: ''
      postgres:
        url: https://grafana.com/api/dashboards/9628/revisions/1/download
        datasource: Prometheus
        token: ''
      argocd:
        url: https://github.com/argoproj/argo-cd/blob/master/examples/dashboard.json
        datasource: Prometheus
        token: ''
      cert-manager:
        url: https://grafana.com/api/dashboards/11001/revisions/1/download
        datasource: Prometheus
        token: ''
      nginx:
        url: https://grafana.com/api/dashboards/9614/revisions/1/download
        datasource: Prometheus
        token: ''
      resource-usage:
        url: https://grafana.com/api/dashboards/13125/revisions/1/download
        datasource: Prometheus
        token: ''
    extraSecretMounts:
    - name: auth-generic-oauth-secret-mount
      secretName: auth-generic-oauth-secret
      defaultMode: 0440
      mountPath: /etc/secrets/auth_generic_oauth
      readOnly: true
    grafana.ini:
      paths:
        data: /var/lib/grafana/
        logs: /var/log/grafana
        plugins: /var/lib/grafana/plugins
        provisioning: /etc/grafana/provisioning
      analytics:
        check_for_updates: true
      log:
        mode: console
      grafana_net:
        url: https://grafana.net
      server:
        domain: "grafana.k8s.tylercash.dev"
        root_url: "https://grafana.k8s.tylercash.dev/"
      auth:
        signout_redirect_url: https://authentik.k8s.tylercash.dev/application/o/grafana/end-session/
        oauth_auto_login: true
        disable_login_form: true
      auth.generic_oauth:
        name: Authentik
        enabled: true
        allow_sign_up: true
        client_id: $__file{/etc/secrets/auth_generic_oauth/client_id}
        client_secret: $__file{/etc/secrets/auth_generic_oauth/client_secret}
        scopes: openid email profile
        auth_url: https://authentik.k8s.tylercash.dev/application/o/authorize/
        token_url: https://authentik.k8s.tylercash.dev/application/o/token/
        api_url: https://authentik.k8s.tylercash.dev/application/o/userinfo/
        tls_skip_verify_insecure: true
        role_attribute_path: contains(groups[*], 'grafana-admin') && 'Admin' || contains(groups[*], 'grafana-write') && 'Editor' || contains(groups[*], 'grafana-read') && 'Viewer'
        role_attribute_strict: true
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "prod-issuer"
        hajimari.io/enable: "true"
        hajimari.io/group: "Monitoring"
        kubernetes.io/ingress-allow-http: "false" 
        kubernetes.io/ingress.class: "nginx"
        nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
        nginx.org/websocket-services: "prometheus-grafana"
        nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8"
      hosts:
        - grafana.k8s.tylercash.dev
      tls:
        - secretName: grafana-letsencrypt-certificate
          hosts:
            - grafana.k8s.tylercash.dev
  prometheus:
    fullNameOverride: prometheus
    prometheusSpec:
      retention: 150d
      retentionSize: "180GB"
      walCompression: true
      replicas: 1
      podMonitorSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      resources:
        limits:
          cpu: 2500m
          memory: 3Gi
        requests:
          cpu: 1500m
          memory: 2Gi
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: ceph-block
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 200Gi
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "prod-issuer"
        hajimari.io/enable: "true"
        hajimari.io/group: "Monitoring"
        kubernetes.io/ingress-allow-http: "false" 
        kubernetes.io/ingress.class: "nginx"
        nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8"
      hosts:
        - prometheus.k8s.tylercash.dev
      tls:
        - secretName: prometheus-letsencrypt-certificate
          hosts:
            - prometheus.k8s.tylercash.dev
  prometheusOperator:
    admissionWebhooks:
      certManager:
        enabled: true
    resources:
      limits:
        cpu: 100m
        memory: 200Mi
      requests:
        cpu: 100m
        memory: 100Mi
  kubeEtcd:
    enabled: true
    endpoints:
    - 10.0.0.83
    - 10.0.0.84
    - 10.0.0.85
    service:
      enabled: true
      port: 2381
      targetPort: 2381

kubeScheduler:
  enabled: true
  endpoints:
  - 10.0.0.83
  - 10.0.0.84
  - 10.0.0.85
  service:
    enabled: true
  serviceMonitor:
    enabled: true
    scheme: https
    insecureSkipVerify: true

kubeProxy:
  enabled: true
  endpoints:
  - 10.0.0.83
  - 10.0.0.84
  - 10.0.0.85

kubeStateMetrics:
  enabled: true