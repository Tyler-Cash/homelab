kube-prometheus-stack:
  nameOverride: "prometheus"
  fullNameOverride: "prometheus"
  alertmanager:
    fullNameOverride: alertmanager
    alertmanagerSpec:
      podAntiAffinity: soft
      resources:
        limits:
          cpu: 200m
          memory: 400Mi
        requests:
          cpu: 100m
          memory: 300Mi
      volumeMounts:
      - name: opsgenie-secret
        mountPath: "/etc/secrets"
        readOnly: true
      volumes:
      - name: opsgenie-secret
        secret:
          secretName: opsgenie-secret
          items:
          - key: alert-manager-k8s
            path: alert-manager-k8s
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: ceph-block
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 50Gi
    config:
      global:
        resolve_timeout: 5m
      inhibit_rules:
        - source_matchers:
            - 'severity = critical'
          target_matchers:
            - 'severity =~ warning|info'
          equal:
            - 'namespace'
            - 'alertname'
        - source_matchers:
            - 'severity = warning'
          target_matchers:
            - 'severity = info'
          equal:
            - 'namespace'
            - 'alertname'
        - source_matchers:
            - 'alertname = InfoInhibitor'
          target_matchers:
            - 'severity = info'
          equal:
            - 'namespace'
      route:
        group_by: [alertname]
        receiver: opsgenie_normal_receiver
        group_wait: 10s
        group_interval: 10s
        repeat_interval: 15m
        routes:
        - receiver: opsgenie_critical_receiver
          match:
            severity: critical
            alerting: opsgenie
          routes:
          - receiver: opsgenie_statuspage_critical_receiver
            match:
              status_page: update
        - receiver: opsgenie_warning_receiver
          match:
            severity: warning
            alerting: opsgenie
          routes:
          - receiver: opsgenie_statuspage_warning_receiver
            match:
              status_page: update
        - receiver: opsgenie_normal_receiver
          match:
            severity: normal
            alerting: opsgenie
          routes:
          - receiver: opsgenie_statuspage_normal_receiver
            match:
              status_page: update
      receivers:
      - name: opsgenie_critical_receiver
        opsgenie_configs:
        - priority: P1
          tags: 'Prometheus'
          message: '{{.CommonAnnotations.summary}}'
          description: '{{.CommonAnnotations.description}}'
      - name: opsgenie_warning_receiver
        opsgenie_configs:
        - priority: P2
          tags: 'Prometheus'
          message: '{{.CommonAnnotations.summary}}'
          description: '{{.CommonAnnotations.description}}'
      - name: opsgenie_normal_receiver
        opsgenie_configs:
        - priority: P3
          tags: 'Prometheus'
          message: '{{.CommonAnnotations.summary}}'
          description: '{{.CommonAnnotations.description}}'
      - name: opsgenie_statuspage_critical_receiver
        opsgenie_configs:
        - priority: P1
          tags: 'Prometheus,Statuspage'
          message: '{{.CommonAnnotations.summary}}'
          description: '{{.CommonAnnotations.description}}'
      - name: opsgenie_statuspage_warning_receiver
        opsgenie_configs:
        - priority: P2
          tags: 'Prometheus,Statuspage'
          message: '{{.CommonAnnotations.summary}}'
          description: '{{.CommonAnnotations.description}}'
      - name: opsgenie_statuspage_normal_receiver
        opsgenie_configs:
        - priority: P3
          tags: 'Prometheus,Statuspage'
          message: '{{.CommonAnnotations.summary}}'
          description: '{{.CommonAnnotations.description}}'
      templates:
      - '/etc/alertmanager/config/*.tmpl'
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "prod-issuer"
        hajimari.io/enable: "true"
        hajimari.io/group: "Monitoring"
        kubernetes.io/ingress-allow-http: "false" 
        kubernetes.io/ingress.class: "nginx"
      hosts:
        - alert-manager.k8s.tylercash.dev
      tls:
        - secretName: alert-manager-letsencrypt-certificate
          hosts:
            - alert-manager.k8s.tylercash.dev
  grafana:
    fullNameOverride: grafana
    defaultDashboardsTimezone: Australia/Sydney
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "prod-issuer"
        hajimari.io/enable: "true"
        hajimari.io/group: "Monitoring"
        kubernetes.io/ingress-allow-http: "false" 
        kubernetes.io/ingress.class: "nginx"
        nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
        nginx.org/websocket-services: "prometheus-grafana"
      hosts:
        - grafana.k8s.tylercash.dev
      tls:
        - secretName: grafana-letsencrypt-certificate
          hosts:
            - grafana.k8s.tylercash.dev
  prometheus:
    fullNameOverride: prometheus
    prometheusSpec:
      retention: 150d
      retentionSize: "180GB"
      walCompression: true
      replicas: 1
      podMonitorSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      resources:
        limits:
          cpu: 2500m
          memory: 3Gi
        requests:
          cpu: 1500m
          memory: 2Gi
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: ceph-block
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 200Gi
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "prod-issuer"
        hajimari.io/enable: "true"
        hajimari.io/group: "Monitoring"
        kubernetes.io/ingress-allow-http: "false" 
        kubernetes.io/ingress.class: "nginx"
      hosts:
        - prometheus.k8s.tylercash.dev
      tls:
        - secretName: prometheus-letsencrypt-certificate
          hosts:
            - prometheus.k8s.tylercash.dev
  prometheusOperator:
    admissionWebhooks:
      certManager:
        enabled: true
    resources:
      limits:
        cpu: 100m
        memory: 200Mi
      requests:
        cpu: 100m
        memory: 100Mi
  kubeEtcd:
    enabled: true
    endpoints:
    - 10.0.0.82
    - 10.0.0.83
    - 10.0.0.85
    service:
      enabled: true
      port: 2381
      targetPort: 2381

kubeScheduler:
  enabled: true
  endpoints:
  - 10.0.0.82
  - 10.0.0.83
  - 10.0.0.85
  service:
    enabled: true
  serviceMonitor:
    enabled: true
    scheme: https
    insecureSkipVerify: true

kubeProxy:
  enabled: true
  endpoints:
  - 10.0.0.82
  - 10.0.0.83
  - 10.0.0.85

kubeStateMetrics:
  enabled: true